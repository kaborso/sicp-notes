Excercise 1.1
10 => 10
(+ 5 3 4) => 12
(- 9 1) => 8
(/ 6 2) => 3
(+ (* 2 4) (- 4 6)) => (+ 8 -2) => 6
(define a 3) => a => 3
(define b (+ a 1)) => b => 4
(+ a b (* a b)) => (+ 3 4 (* 3 4)) => 19
(= a b) => false
(if (and (> b a) (< b (* a b))) b a)
	=> (if (and true true) b) a) => b => 4
(cond ((= a 4) 6)
		((= b 4) (+ 6 7 a))
		(else 25)) => 16
(+ 2 (if (> b a) b a)) => 6
(* (cond ((> a b) a)
			((< a b) b)
			(else -1))
	(+ a 1)) => (* b (+ a 1)) => (* 4 4) => 16

Excercise 1.2
(/ (+ 5 (/ 1 2) (- 2 (- 3 (+ 6 (/ 1 5)))))
	(* 3 (- 6 2) (- 2 7)))

Excercise 1.3
(define (sum-of-squares a b) (+ (* a a) (*b b)))
(define (sum-big-square x y z)
		(cond
			((<= x y z) (sum-of-squares y z))
			((<= y x z) (sum-of-squares x z))
			(else (sum-of-squares x y))))

Exercise 1.4
(define (a-plus-abs-b a b)
	((if (> b 0) + -) a b))
-- if b is positive, add it to a, if negative, subtract it from b

Excercise 1.5
If the if form is evaluated first (normal order), it will see that x = 0, and return 0, never trying to evaluate y. If it evaluates the parameters first (applicative order), it will try to evaluate (p) which expands to (p), which will not terminate.

Exercise 1.6 
The new-if function evaulates the then and else conditions before it determines which one to return based on the predicate. The else condition is recursive. This results in an endless loop.

Exercise 1.7 
For small numbers, the good-enough? test is not precise enough to be meaningful.
> (square (sqrt-iter 1 .00000000016))
0.0009765626065625017
> (sqrt-iter 1 99999999999999) -- took so long I got tired of waiting.


Exercise 1.9 
(define (+ a b)
	(if (= a 0)
	b
	(inc (+ (dec a) b))))
(+ 4 5)
(inc (+ 3 5))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9

(define (+ a b)
	(if (= a 0)
		b
		(+ (dec a) (inc b))))
(+ 4 5)
(+ 3 6)
(+ 2 7)
(+ 1 8)
(+ 0 9)
9

Exercise 1.13 I don't like doing proofs


